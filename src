import os  # for working with files and directories

class InvalidFormatException(Exception):
    pass

class SparseMatrix:
    def _init_(self, file_path=None, num_rows=0, num_cols=0):
        self.num_rows = num_rows
        self.num_cols = num_cols
        self.data = {}  # (row, col): value

        if file_path:
            self.load_from_file(file_path)

    def load_from_file(self, file_path):
        try:
            with open(file_path, 'r') as file:
                lines = [line.strip() for line in file if line.strip() != '']

                if not lines[0].startswith("rows=") or not lines[1].startswith("cols="):
                    raise InvalidFormatException("Input file has wrong format")

                self.num_rows = int(lines[0].split("=")[1])
                self.num_cols = int(lines[1].split("=")[1])

                for line in lines[2:]:
                    if not (line.startswith("(") and line.endswith(")")):
                        raise InvalidFormatException("Input file has wrong format")

                    line = line[1:-1]
                    parts = [part.strip() for part in line.split(",")]

                    if len(parts) != 3:
                        raise InvalidFormatException("Input file has wrong format")

                    row, col, value = parts

                    if "." in row or "." in col or "." in value:
                        raise InvalidFormatException("Input file has wrong format")

                    row = int(row)
                    col = int(col)
                    value = int(value)

                    self.set_element(row, col, value)
        except ValueError:
            raise InvalidFormatException("Input file has wrong format")
        except FileNotFoundError:
            print(f"‚ùå File not found: {file_path}")
            exit()

    def set_element(self, row, col, value):
        if value != 0:
            self.data[(row, col)] = value
        elif (row, col) in self.data:
            del self.data[(row, col)]

    def get_element(self, row, col):
        return self.data.get((row, col), 0)

    def _add_(self, other):
        if self.num_rows != other.num_rows or self.num_cols != other.num_cols:
            raise ValueError("Matrix dimensions do not match for addition")

        result = SparseMatrix(num_rows=self.num_rows, num_cols=self.num_cols)
        keys = set(self.data.keys()).union(other.data.keys())
        for key in keys:
            val = self.get_element(*key) + other.get_element(*key)
            if val != 0:
                result.set_element(*key, val)
        return result

    def _sub_(self, other):
        if self.num_rows != other.num_rows or self.num_cols != other.num_cols:
            raise ValueError("Matrix dimensions do not match for subtraction")

        result = SparseMatrix(num_rows=self.num_rows, num_cols=self.num_cols)
        keys = set(self.data.keys()).union(other.data.keys())
        for key in keys:
            val = self.get_element(*key) - other.get_element(*key)
            if val != 0:
                result.set_element(*key, val)
        return result

    def _mul_(self, other):
        if self.num_cols != other.num_rows:
            raise ValueError("Matrix dimensions do not match for multiplication")

        result = SparseMatrix(num_rows=self.num_rows, num_cols=other.num_cols)

        for (i, k1), val1 in self.data.items():
            for j in range(other.num_cols):
                val2 = other.get_element(k1, j)
                if val2 != 0:
                    current = result.get_element(i, j)
                    result.set_element(i, j, current + val1 * val2)
        return result

    def to_string(self):
        lines = [f"rows={self.num_rows}", f"cols={self.num_cols}"]
        for (r, c), v in sorted(self.data.items()):
            lines.append(f"({r},{c},{v})")
        return "\n".join(lines)

    def save_to_file(self, filename):
        with open(filename, "w") as file:
            file.write(self.to_string())

def main():
    # ‚úÖ Correct base path where your matrix files are stored
    base_path = "mnt/c/Users/LENOVO/OneDrive/Desktop/DSA"
    f1 = input("Enter first matrix filename (e.g., easy_sample_02_1.txt): ")
    f2 = input("Enter second matrix filename (e.g., easy_sample_02_2.txt): ")
    file1 = os.path.join(base_path, f1)
    file2 = os.path.join(base_path, f2)

    print(f"üìÇ Loading first matrix from: {file1}")
    print(f"üìÇ Loading second matrix from: {file2}")

    try:
        A = SparseMatrix(file1)
        B = SparseMatrix(file2)

        print("\nSelect operation:")
        print("1) Add")
        print("2) Subtract")
        print("3) Multiply")
        op = input("Enter choice (1/2/3): ")

        if op == '1':
            C = A + B
            print("‚úÖ Result of Addition:\n", C.to_string())
        elif op == '2':
            C = A - B
            print("‚úÖ Result of Subtraction:\n", C.to_string())
        elif op == '3':
            C = A * B
            print("‚úÖ Result of Multiplication:\n", C.to_string())
        else:
            print("‚ùå Invalid option")
            return

        output_path = os.path.join(base_path, "result_matrix.txt")
        C.save_to_file(output_path)
        print(f"\nüìÑ Result saved to: {output_path}")

    except InvalidFormatException as e:
        print(f"‚ùå Format Error: {e}")
    except ValueError as ve:
        print(f"‚ùå Operation Error: {ve}")

if _name_ == "_main_":
    main()

 
 
